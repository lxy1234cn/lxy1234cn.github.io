<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#中的装饰者模式</title>
      <link href="/2025/06/20/C-%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/06/20/C-%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h3 id="装饰者模式：动态扩展对象功能"><a href="#装饰者模式：动态扩展对象功能" class="headerlink" title="装饰者模式：动态扩展对象功能"></a>装饰者模式：动态扩展对象功能</h3><p>主要代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Beverage</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> description = <span class="string">&quot;Unknown Beverage&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDescription</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">float</span> <span class="title">Cost</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">CondimentDecorator</span> : <span class="title">Beverage</span> &#123;</span><br><span class="line">    <span class="comment">// 装饰器基类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerkBeverage</span> : <span class="title">Beverage</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DerkBeverage</span>()</span> &#123;</span><br><span class="line">        description = <span class="string">&quot;Derk Beverage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">Cost</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Milk</span> : <span class="title">CondimentDecorator</span> &#123;</span><br><span class="line">    Beverage _beverage;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span>(<span class="params">Beverage beverage</span>)</span> &#123;</span><br><span class="line">        _beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetDescription</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _beverage.GetDescription() + <span class="string">&quot;, Milk&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">Cost</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _beverage.Cost() + <span class="number">0.1f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sugar</span> : <span class="title">CondimentDecorator</span> &#123;</span><br><span class="line">    Beverage _beverage;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sugar</span>(<span class="params">Beverage beverage</span>)</span> &#123;</span><br><span class="line">        _beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetDescription</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _beverage.GetDescription() + <span class="string">&quot;, Sugar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">Cost</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _beverage.Cost() + <span class="number">0.1f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模式结构</p><table><thead><tr><th align="left">角色</th><th align="left">代码示例</th><th align="left">职责</th></tr></thead><tbody><tr><td align="left">组件接口</td><td align="left">Beverage</td><td align="left">定义基础对象接口</td></tr><tr><td align="left">具体组件</td><td align="left">DerkBeverage</td><td align="left">实现基础功能</td></tr><tr><td align="left">装饰器基类</td><td align="left">CondimentDecorator</td><td align="left">继承组件接口</td></tr><tr><td align="left">具体装饰器</td><td align="left">Milk&#x2F;Sugar</td><td align="left">添加额外功能</td></tr></tbody></table><p>关键点</p><ol><li><p>递归组合</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Milk</span> : <span class="title">CondimentDecorator</span> &#123;</span><br><span class="line">    Beverage _beverage;  <span class="comment">// 持有被装饰对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">Cost</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _beverage.Cost() + <span class="number">0.1f</span>;  <span class="comment">// 递归调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>透明装饰</p><ul><li><p>装饰器与组件接口一致</p></li><li><p>客户端无感知装饰过程</p></li></ul></li><li><p>动态扩展</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beverage = <span class="keyword">new</span> Milk(beverage);  <span class="comment">// 运行时添加功能</span></span><br><span class="line">beverage = <span class="keyword">new</span> Sugar(beverage); <span class="comment">// 可叠加多个装饰器</span></span><br></pre></td></tr></table></figure></li></ol><p>使用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Beverage beverage = <span class="keyword">new</span> DerkBeverage();</span><br><span class="line">Console.WriteLine(beverage.GetDescription() + <span class="string">&quot; $&quot;</span> + beverage.Cost());</span><br><span class="line"></span><br><span class="line">beverage = <span class="keyword">new</span> Milk(beverage);</span><br><span class="line">Console.WriteLine(beverage.GetDescription() + <span class="string">&quot; $&quot;</span> + beverage.Cost());</span><br><span class="line"></span><br><span class="line">beverage = <span class="keyword">new</span> Sugar(beverage);</span><br><span class="line">Console.WriteLine(beverage.GetDescription() + <span class="string">&quot; $&quot;</span> + beverage.Cost());</span><br></pre></td></tr></table></figure><p>优势分析</p><table><thead><tr><th align="left">特性</th><th align="left">实现方式</th><th align="left">优势</th></tr></thead><tbody><tr><td align="left">动态扩展</td><td align="left">运行时添加装饰器</td><td align="left">避免静态继承的类爆炸</td></tr><tr><td align="left">开闭原则</td><td align="left">新增装饰器不影响现有代码</td><td align="left">系统扩展性强</td></tr><tr><td align="left">功能分解</td><td align="left">每个装饰器只添加单一功能</td><td align="left">符合单一职责原则</td></tr><tr><td align="left">透明性</td><td align="left">装饰器与组件接口一致</td><td align="left">客户端无需改变调用方式</td></tr></tbody></table><p>应用场景<br>    - 需要动态添加&#x2F;撤销功能</p><pre><code>- 不适合使用子类扩展的场景- 常见案例：    - GUI组件装饰（滚动条/边框）    - 流处理（加密/压缩装饰器）    - 权限系统（叠加权限检查）</code></pre><p>要点记忆：</p><ol><li><p>所有装饰器继承CondimentDecorator基类</p></li><li><p>装饰器构造函数接收被装饰对象</p></li><li><p>GetDescription()递归拼接描述</p></li><li><p>Cost()递归计算总价</p></li><li><p>可多层嵌套装饰（牛奶+糖）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中的桥接模式</title>
      <link href="/2025/06/20/C-%E4%B8%AD%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/06/20/C-%E4%B8%AD%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h3 id="桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。"><a href="#桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。" class="headerlink" title="桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。"></a>桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。</h3><p>主要代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;桥接模式&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">TV</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TuneChannel</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">RemoteControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> TV _tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTV</span>(<span class="params">TV tv</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SetChannel</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteRemote</span> : <span class="title">RemoteControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetChannel</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _tv.TuneChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SonyTV</span> : <span class="title">TV</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TuneChannel</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;SonyTV.TuneChannel is called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SamsungTV</span> : <span class="title">TV</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TuneChannel</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;SamsungTV.TuneChannel is called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;桥接模式/&gt;</span></span></span><br></pre></td></tr></table></figure><p>模式结构</p><table><thead><tr><th align="left">角色</th><th align="left">代码示例</th><th align="left">职责</th></tr></thead><tbody><tr><td align="left">抽象部分</td><td align="left">RemoteControl</td><td align="left">定义高层控制逻辑</td></tr><tr><td align="left">扩展抽象</td><td align="left">ConcreteRemote</td><td align="left">实现抽象部分的接口</td></tr><tr><td align="left">实现者接口</td><td align="left">TV</td><td align="left">定义底层实现接口</td></tr><tr><td align="left">具体实现者</td><td align="left">SonyTV&#x2F;SamsungTV</td><td align="left">实现具体业务功能</td></tr></tbody></table><p>关键点</p><ol><li>双重分离<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">RemoteControl</span> &#123;  <span class="comment">// 抽象部分</span></span><br><span class="line">    <span class="keyword">public</span> TV _tv;                    <span class="comment">// 桥接点：持有实现者引用</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行时绑定<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remote.SetTV(sony);    <span class="comment">// 动态切换实现</span></span><br><span class="line">remote.SetChannel();</span><br></pre></td></tr></table></figure></li><li>独立演化</li></ol><ul><li><p>新增遥控器类型只需继承RemoteControl</p></li><li><p>新增电视品牌只需实现TV接口</p></li></ul><p>使用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RemoteControl remoteControl = <span class="keyword">new</span> ConcreteRemote();</span><br><span class="line"></span><br><span class="line">TV Sony = <span class="keyword">new</span> SonyTV();</span><br><span class="line"></span><br><span class="line">TV Samsung = <span class="keyword">new</span> SamsungTV();</span><br><span class="line"></span><br><span class="line">remoteControl.SetTV(Sony);</span><br><span class="line">remoteControl.SetChannel();</span><br><span class="line"></span><br><span class="line">remoteControl.SetTV(Samsung);</span><br><span class="line">remoteControl.SetChannel();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优势分析</p><table><thead><tr><th align="left">特性</th><th align="left">实现方式</th><th align="left">优势</th></tr></thead><tbody><tr><td align="left">解耦抽象与实现</td><td align="left">通过桥接接口连接</td><td align="left">两者可独立变化</td></tr><tr><td align="left">扩展性</td><td align="left">新增电视品牌不影响遥控器逻辑</td><td align="left">符合开闭原则</td></tr><tr><td align="left">组合优于继承</td><td align="left">使用对象组合而非多层继承</td><td align="left">避免类爆炸</td></tr><tr><td align="left">动态切换</td><td align="left">SetTV()方法</td><td align="left">运行时更换实现</td></tr></tbody></table><p>应用场景<br>    - 需要多维度扩展的系统</p><pre><code>- 抽象和实现都应支持独立扩展- 避免永久绑定抽象与实现- 常见案例：    - 不同操作系统+不同文件格式    - 多种支付方式+多种支付渠道    - 不同形状+不同渲染引擎</code></pre><p>要点记忆：</p><ul><li><p>RemoteControl持有TV接口引用（桥接核心）</p></li><li><p>ConcreteRemote将操作委托给TV实现</p></li><li><p>通过SetTV()动态切换具体电视品牌</p></li><li><p>新增电视品牌只需实现TV接口</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中的适配器模式</title>
      <link href="/2025/06/20/C-%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/06/20/C-%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h3 id="适配器模式：将一个类的接口转换成客户希望的另外一个接口-即接口转换的桥梁。"><a href="#适配器模式：将一个类的接口转换成客户希望的另外一个接口-即接口转换的桥梁。" class="headerlink" title="适配器模式：将一个类的接口转换成客户希望的另外一个接口,即接口转换的桥梁。"></a>适配器模式：将一个类的接口转换成客户希望的另外一个接口,即接口转换的桥梁。</h3><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;适配器模式&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITarget</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Request</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adaptee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpecificRequest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Adaptee.SpecificRequest is called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">ITarget</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee _adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _adaptee.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;适配器模式/&gt;</span></span></span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>客户端调用适配器Request()方法</li><li>适配器调用被适配者Adaptee.SpecificRequest()方法<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line">ITarget target = <span class="keyword">new</span> Adapter();</span><br><span class="line">target.Request();  </span><br></pre></td></tr></table></figure>模式结构<table><thead><tr><th align="left">角色</th><th align="left">代码示例</th><th align="left">职责</th></tr></thead><tbody><tr><td align="left">目标接口</td><td align="left">ITarget</td><td align="left">定义客户端使用的统一接口</td></tr><tr><td align="left">适配者</td><td align="left">Adaptee</td><td align="left">需要被适配的现有类</td></tr><tr><td align="left">适配器</td><td align="left">Adapter</td><td align="left">实现目标接口并包装适配者</td></tr></tbody></table></li></ol><p>关键点</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">ITarget</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee _adaptee = <span class="keyword">new</span> Adaptee();  <span class="comment">// 1. 持有适配者实例</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span>()</span> &#123;                    <span class="comment">// 2. 实现目标接口方法</span></span><br><span class="line">        _adaptee.SpecificRequest();            <span class="comment">// 3. 委托给适配者的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工作流程：</p><ol><li><p>客户端调用目标接口方法 Request()</p></li><li><p>适配器将调用转发给适配者的 SpecificRequest()</p></li><li><p>适配者执行实际功能</p></li></ol><p>应用场景</p><ul><li><p>集成不兼容的第三方库</p></li><li><p>复用遗留系统功能</p></li><li><p>统一多个类的接口</p></li><li><p>系统升级时的接口转换</p></li></ul><p>优势</p><ul><li><p>接口兼容：使不兼容接口能协同工作</p></li><li><p>复用性：无需修改现有代码即可重用功能</p></li><li><p>解耦：客户端与适配者无直接依赖</p></li></ul><p>要点记忆</p><ol><li><p>Adapter 类实现 ITarget 接口</p></li><li><p>适配器内部持有 Adaptee 实例</p></li><li><p>Request() 方法中调用 SpecificRequest()</p></li><li><p>客户端只与 ITarget 接口交互</p></li></ol><p>完整代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;适配器模式&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITarget</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Request</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adaptee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpecificRequest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Adaptee.SpecificRequest is called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">ITarget</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee _adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _adaptee.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;适配器模式/&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;适配器模式&gt;</span></span></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;适配器模式:&quot;</span>);</span><br><span class="line">        ITarget adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line">        adapter.Request();</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;适配器模式/&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中的观察者模式</title>
      <link href="/2025/06/18/C-%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/06/18/C-%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;观察者模式&gt;</span></span></span><br><span class="line"><span class="comment">//1. 定义观察者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IObserver</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 定义主题(被观察者)接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubject</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RegisterObserver</span>(<span class="params">IObserver observer</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RemoveObserver</span>(<span class="params">IObserver observer</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Notify</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 定义具体主题(被观察者)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subject</span> : <span class="title">ISubject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IObserver&gt; _observers = <span class="keyword">new</span> List&lt;IObserver&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _state &#123; <span class="keyword">get</span> ; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SetState</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _state; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _state = <span class="keyword">value</span>;</span><br><span class="line">            Notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegisterObserver</span>(<span class="params">IObserver observer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _observers.Add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveObserver</span>(<span class="params">IObserver observer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _observers.Remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> observer <span class="keyword">in</span> _observers)</span><br><span class="line">        &#123;</span><br><span class="line">            observer.Update(_state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4. 定义具体观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Observer</span> : <span class="title">IObserver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observer</span>(<span class="params"><span class="built_in">string</span> name</span>)</span> </span><br><span class="line">    &#123; </span><br><span class="line">    _name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>()</span></span><br><span class="line">    &#123; </span><br><span class="line">    <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Observer<span class="subst">&#123;_name&#125;</span> received message: <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;观察者模式/&gt;</span></span></span><br></pre></td></tr></table></figure><p>执行流程：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">IObserver observer1 = <span class="keyword">new</span> Observer(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">IObserver observer2 = <span class="keyword">new</span> Observer(<span class="string">&quot;101&quot;</span>);</span><br><span class="line"></span><br><span class="line">subject.RegisterObserver(observer1);</span><br><span class="line">subject.RegisterObserver(observer2);</span><br><span class="line"></span><br><span class="line">subject.SetState = <span class="string">&quot;New message&quot;</span>; <span class="comment">// 自动通知所有观察者</span></span><br><span class="line">subject.RemoveObserver(observer1);</span><br><span class="line">subject.SetState = <span class="string">&quot;Another message&quot;</span>; <span class="comment">// 仅通知observer2</span></span><br></pre></td></tr></table></figure><p>模式要点</p><ol><li><p>主题(Subject)</p><ul><li><p>维护观察者列表</p></li><li><p>状态变更时自动通知</p></li></ul></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置状态调用Notify()方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> SetState</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _state; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        _state = <span class="keyword">value</span>;</span><br><span class="line">        Notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新观察者列表中所有观察者的状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> observer <span class="keyword">in</span> _observers)</span><br><span class="line">    &#123;</span><br><span class="line">        observer.Update(_state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>观察者(Observer)</p><ul><li><p>实现Update()方法</p></li><li><p>接收主题通知</p></li></ul></li><li><p>接口分离</p><ul><li><p>ISubject定义管理观察者的方法</p></li><li><p>IObserver定义更新接口</p></li></ul></li></ol><p>优势</p><ul><li><p>主题和观察者松耦合</p></li><li><p>支持动态添加&#x2F;移除观察者</p></li><li><p>状态变更自动传播</p></li></ul><p>适用场景</p><ul><li><p>事件通知系统</p></li><li><p>数据监控</p></li><li><p>GUI事件处理</p></li><li><p>实时数据更新</p></li></ul><p>完整代码:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;观察者模式&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IObserver</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubject</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RegisterObserver</span>(<span class="params">IObserver observer</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RemoveObserver</span>(<span class="params">IObserver observer</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Notify</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subject</span> : <span class="title">ISubject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IObserver&gt; _observers = <span class="keyword">new</span> List&lt;IObserver&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _state &#123; <span class="keyword">get</span> ; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SetState</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _state; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _state = <span class="keyword">value</span>;</span><br><span class="line">            Notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegisterObserver</span>(<span class="params">IObserver observer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _observers.Add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveObserver</span>(<span class="params">IObserver observer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _observers.Remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> observer <span class="keyword">in</span> _observers)</span><br><span class="line">        &#123;</span><br><span class="line">            observer.Update(_state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Observer</span> : <span class="title">IObserver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observer</span>(<span class="params"><span class="built_in">string</span> name</span>)</span> </span><br><span class="line">    &#123; </span><br><span class="line">    _name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>()</span></span><br><span class="line">    &#123; </span><br><span class="line">    <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Observer<span class="subst">&#123;_name&#125;</span> received message: <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;观察者模式/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;观察者模式&gt;</span></span></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;观察者模式:&quot;</span>);</span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        IObserver observer1 = <span class="keyword">new</span> Observer(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        IObserver observer2 = <span class="keyword">new</span> Observer(<span class="string">&quot;101&quot;</span>);</span><br><span class="line">        subject.RegisterObserver(observer1);</span><br><span class="line">        subject.RegisterObserver(observer2);</span><br><span class="line">        subject.SetState = <span class="string">&quot;New message&quot;</span>;</span><br><span class="line">        subject.RemoveObserver(observer1);</span><br><span class="line">        subject.SetState = <span class="string">&quot;Another message&quot;</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;观察者模式/&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中的状态模式</title>
      <link href="/2025/06/18/C-%E4%B8%AD%E7%9A%84%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/06/18/C-%E4%B8%AD%E7%9A%84%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><p>当对象需要根据内部状态改变行为时，常见做法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(currentState) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;New&quot;</span>: ProcessNew(); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Shipped&quot;</span>: ProcessShipped(); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Delivered&quot;</span>: ProcessDelivered(); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><ol><li><p>状态转换逻辑散落在各处</p></li><li><p>新增状态需修改核心代码</p></li><li><p>状态和行为强耦合</p></li></ol><p>解决方案：状态模式</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;状态模式&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 定义状态接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOrderState</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span>(<span class="params">OrderStatusManager context</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 实现具体状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NewOrderState</span> : <span class="title">IOrderState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">OrderStatusManager context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing new order&quot;</span>);</span><br><span class="line">        context.SetState(<span class="keyword">new</span> ShippedOrderState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShippedOrderState</span> : <span class="title">IOrderState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">OrderStatusManager context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing shipped order&quot;</span>);</span><br><span class="line">        context.SetState(<span class="keyword">new</span> DeliveredOrderState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DeliveredOrderState</span> : <span class="title">IOrderState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">OrderStatusManager context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing delivered order&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 创建状态管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderStatusManager</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">private</span> IOrderState _orederState &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetState</span>(<span class="params">IOrderState orderState</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _orederState = orderState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">     _orederState.Process(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;状态模式/&gt;</span></span></span><br></pre></td></tr></table></figure><p>模式特点</p><ol><li><p>状态封装</p><ul><li><p>每个状态都是独立类</p></li><li><p>包含状态特有行为</p></li><li><p>控制状态转换逻辑</p></li></ul></li><li><p>状态转换</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在内部完成状态转换</span></span><br><span class="line">context.SetState(<span class="keyword">new</span> ShippedOrderState());</span><br></pre></td></tr></table></figure></li><li><p>上下文委托</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行为委托给当前状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>()</span> &#123;</span><br><span class="line">    _orederState.Process(<span class="keyword">this</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OrderStatusManager orderStatusManager = <span class="keyword">new</span> OrderStatusManager();</span><br><span class="line">orderStatusManager.SetState(<span class="keyword">new</span> NewOrderState());</span><br><span class="line"></span><br><span class="line">orderStatusManager.Process();  <span class="comment">// 输出: Processing new order → 状态变为Shipped</span></span><br><span class="line">orderStatusManager.Process();  <span class="comment">// 输出: Processing shipped order → 状态变为Delivered</span></span><br><span class="line">orderStatusManager.Process();  <span class="comment">// 输出: Processing delivered order</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="设计优势"><a href="#设计优势" class="headerlink" title="设计优势"></a>设计优势</h3><table><thead><tr><th align="left">特性</th><th align="left">实现方式</th><th align="left">收益</th></tr></thead><tbody><tr><td align="left">状态隔离</td><td align="left">每个状态独立类</td><td align="left">修改状态不影响其他逻辑</td></tr><tr><td align="left">消除条件分支</td><td align="left">多态代替switch</td><td align="left">代码更简洁</td></tr><tr><td align="left">显式状态转换</td><td align="left">SetState()方法</td><td align="left">状态流转清晰可见</td></tr><tr><td align="left">开闭原则</td><td align="left">新增状态只需添加类</td><td align="left">扩展性强</td></tr></tbody></table><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><p>对象行为随状态改变的场景</p></li><li><p>状态数量超过5个的复杂状态机</p></li><li><p>需要清晰状态转换路径的系统</p></li><li><p>订单流程、游戏角色状态等工作流</p></li></ul><blockquote><p>状态模式通过将每个状态封装为独立类来管理状态相关行为<br>上下文对象（OrderStatusManager）持有当前状态引用<br>状态转换由具体状态类触发<br>符合单一职责原则（每个状态只关注自身行为）</p></blockquote><p>完整代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;状态模式&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOrderState</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span>(<span class="params">OrderStatusManager context</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NewOrderState</span> : <span class="title">IOrderState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">OrderStatusManager context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing new order&quot;</span>);</span><br><span class="line">        context.SetState(<span class="keyword">new</span> ShippedOrderState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShippedOrderState</span> : <span class="title">IOrderState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">OrderStatusManager context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing shipped order&quot;</span>);</span><br><span class="line">        context.SetState(<span class="keyword">new</span> DeliveredOrderState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DeliveredOrderState</span> : <span class="title">IOrderState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">OrderStatusManager context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing delivered order&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderStatusManager</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">private</span> IOrderState _orederState &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetState</span>(<span class="params">IOrderState orderState</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _orederState = orderState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">     _orederState.Process(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;状态模式/&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;状态模式&gt;</span></span></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;状态模式:&quot;</span>);</span><br><span class="line">        OrderStatusManager orderStatusManager = <span class="keyword">new</span> OrderStatusManager();</span><br><span class="line">        orderStatusManager.SetState(<span class="keyword">new</span> NewOrderState());</span><br><span class="line">        orderStatusManager.Process();</span><br><span class="line">        orderStatusManager.Process();</span><br><span class="line">        orderStatusManager.Process();</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;状态模式/&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中的策略模式</title>
      <link href="/2025/06/18/C-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/06/18/C-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h2 id="策略模式：动态切换算法"><a href="#策略模式：动态切换算法" class="headerlink" title="策略模式：动态切换算法"></a>策略模式：动态切换算法</h2><p>当业务需要支持多种算法变体时，常见做法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(paymentMethod == <span class="string">&quot;Cash&quot;</span>) ProcessCash();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(paymentMethod == <span class="string">&quot;CreditCard&quot;</span>) ProcessCreditCard();</span><br></pre></td></tr></table></figure><p>但是这样容易出现一些问题：</p><ol><li><p>新增支付方式需修改核心代码</p></li><li><p>支付逻辑与控制器耦合</p></li><li><p>难以单独测试支付算法</p></li></ol><p>解决方案：策略模式</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;策略模式&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPaymentStrategy</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ProcessPayment</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CashPaymentStrategy</span> : <span class="title">IPaymentStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing cash payment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreditCardPaymentStrategy</span> : <span class="title">IPaymentStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing credit card payment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>(<span class="params">IPaymentStrategy paymentStrategy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        paymentStrategy.ProcessPayment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;策略模式/&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li><p>开闭原则</p><ul><li><p>添加新支付方式只需创建新类</p></li><li><p>示例：添加PayPalStrategy无需修改处理器</p></li></ul></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PayPalStrategy</span> : <span class="title">IPaymentStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing PayPal payment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>组合优于继承</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>(<span class="params">IPaymentStrategy paymentStrategy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        paymentStrategy.ProcessPayment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单一职责原则</p><ul><li><p>每种策略只负责一种算法实现</p></li><li><p>控制器只负责执行策略</p></li></ul></li></ol><p>适用场景<br>    - 需要在运行时切换算法</p><pre><code>- 有多个相似类仅在行为上不同- 需要隔离复杂算法实现细节</code></pre><p>典型应用<br>    - 支付方式处理</p><pre><code>- 数据压缩算法- 导航路径计算- 折扣计算规则</code></pre><p>完整代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;策略模式&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPaymentStrategy</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ProcessPayment</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CashPaymentStrategy</span> : <span class="title">IPaymentStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing cash payment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreditCardPaymentStrategy</span> : <span class="title">IPaymentStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing credit card payment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>(<span class="params">IPaymentStrategy paymentStrategy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        paymentStrategy.ProcessPayment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;策略模式/&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;策略模式&gt;</span></span></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;策略模式:&quot;</span>);</span><br><span class="line">        PaymentProcessor paymentProcessor = <span class="keyword">new</span> PaymentProcessor();</span><br><span class="line">        paymentProcessor.ProcessPayment(<span class="keyword">new</span> CashPaymentStrategy());</span><br><span class="line">        paymentProcessor.ProcessPayment(<span class="keyword">new</span> CreditCardPaymentStrategy());</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;策略模式/&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中的多态及switch</title>
      <link href="/2025/06/18/C-%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81%E5%8F%8Aswitch/"/>
      <url>/2025/06/18/C-%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81%E5%8F%8Aswitch/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h2 id="简单工厂模式：用多态优化对象创建（基于订单处理系统案例）"><a href="#简单工厂模式：用多态优化对象创建（基于订单处理系统案例）" class="headerlink" title="简单工厂模式：用多态优化对象创建（基于订单处理系统案例）"></a>简单工厂模式：用多态优化对象创建（基于订单处理系统案例）</h2><p>问题场景<br>当业务需要根据不同条件创建不同对象时，常见做法是使用switch或if-else分支：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(orderType == <span class="string">&quot;Book&quot;</span>) CreateBookHandler();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(orderType == <span class="string">&quot;Video&quot;</span>) CreateVideoHandler();</span><br></pre></td></tr></table></figure><p>这种写法会导致：</p><ol><li><p>新增类型需修改核心逻辑</p></li><li><p>创建逻辑散落在各处</p></li><li><p>单元测试困难</p></li></ol><p>解决方案：简单工厂+多态</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义公共接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOrderHandler</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Handle</span>()</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 实现具体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookOrderHandler</span> : <span class="title">IOrderHandler</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;处理书籍订单&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VideoOrderHandler</span> : <span class="title">IOrderHandler</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;处理视频订单&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderProcessor</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IOrderHandler <span class="title">Create</span>(<span class="params"><span class="built_in">string</span> orderType</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (orderType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Book&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> BookOrderHandler();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Video&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> VideoOrderHandler();</span><br><span class="line">            <span class="literal">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;无效订单类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params"><span class="built_in">string</span> orderType</span>)</span> &#123;</span><br><span class="line">        IOrderHandler handler = Create(orderType);</span><br><span class="line">        handler.Handle(); <span class="comment">// 多态调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li><p>开闭原则</p><ul><li><p>新增订单类型只需添加新类，无需修改Process()方法</p></li><li><p>示例：添加MusicOrderHandler不影响现有逻辑</p></li></ul></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MusicOrderHandler</span> : <span class="title">IOrderHandler</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;处理音乐订单&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderProcessor</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IOrderHandler <span class="title">Create</span>(<span class="params"><span class="built_in">string</span> orderType</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (orderType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Book&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> BookOrderHandler();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Video&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> VideoOrderHandler();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Music&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> MusicOrderHandler();</span><br><span class="line">            <span class="literal">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;无效订单类型&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>单一职责原则</p><ul><li><p>OrderProcessor只负责流程控制</p></li><li><p>具体处理逻辑由各实现类完成</p></li></ul></li><li><p>依赖倒置原则</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖抽象而非具体实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params"><span class="built_in">string</span> orderType</span>)</span> &#123;</span><br><span class="line">    IOrderHandler handler = Create(orderType); <span class="comment">// &lt;- 依赖接口</span></span><br><span class="line">    handler.Handle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NetCore读取配置文件</title>
      <link href="/2025/06/17/ASP-NetCore%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2025/06/17/ASP-NetCore%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h1 id="ASP-NET-Core-配置读取攻略：四种实战方案解析（-NET-8）"><a href="#ASP-NET-Core-配置读取攻略：四种实战方案解析（-NET-8）" class="headerlink" title="ASP.NET Core 配置读取攻略：四种实战方案解析（.NET 8）"></a>ASP.NET Core 配置读取攻略：四种实战方案解析（.NET 8）</h1><p>本文将深入探讨ASP.NET Core中四种主流的配置读取方案，通过实际案例对比其适用场景与最佳实践。以下为项目核心结构：</p><h2 id="配置文件示例-appsettings-json"><a href="#配置文件示例-appsettings-json" class="headerlink" title="配置文件示例 (appsettings.json)"></a>配置文件示例 (appsettings.json)</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Emails&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;DefaultEmail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a1234567890@qq.com&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LoginUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:5000/Identity/Account/Login&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;RegisterUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:5000/Identity/Account/Register&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;FruitPrices&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Apple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.99$&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Banana&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.99$&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PhonePrices&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;iPhone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6999$&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Samsung&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4999$&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="方案一：IConfiguration-键值直取"><a href="#方案一：IConfiguration-键值直取" class="headerlink" title="方案一：IConfiguration (键值直取)"></a>方案一：IConfiguration (键值直取)</h2><p>特点</p><ul><li>最基础的配置访问方式</li><li>直接通过路径字符串读取</li><li>无需提前注册配置类</li></ul><p>控制器使用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _configuration;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestController</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;GetConfigerDataAboutEmail&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">GetConfigerDataAboutEmail</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Ok(_configuration[<span class="string">&quot;Emails:DefaultEmail&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果截图<br><img src="https://img.picgo.net/2025/06/17/-2025-06-17-202752413a4dcc8a75f1b3.png" alt="屏幕截图 2025 06 17 202752"></p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">✅ 快速原型开发</span><br><span class="line">✅ 读取单个简单配置项</span><br><span class="line">✅ 临时调试场景</span><br></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">⚠️ 路径字符串硬编码（易出错）</span><br><span class="line">⚠️ 缺乏类型安全</span><br><span class="line">⚠️ 不支持配置热更新</span><br></pre></td></tr></table></figure><h2 id="方案二：自定义类绑定-强类型静态配置"><a href="#方案二：自定义类绑定-强类型静态配置" class="headerlink" title="方案二：自定义类绑定 (强类型静态配置)"></a>方案二：自定义类绑定 (强类型静态配置)</h2><ol><li>定义配置类<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Urls</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LoginUrl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> RegisterUrl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在program.cs中注册配置类(如果是在net6.0以下版本，需要在Startup中注册的configureServices中注册)<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urls = builder.Configuration.GetSection(<span class="string">&quot;Urls&quot;</span>).Get&lt;Urls&gt;();</span><br><span class="line">builder.Services.AddSingleton(urls);</span><br></pre></td></tr></table></figure></li><li>在控制器中注入使用<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Urls _urls;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestController</span>(<span class="params">Urls urls</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _urls = urls;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;GetConfigerDataAboutUrls&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">GetConfigerDataAboutUrls</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Ok(_urls.LoginUrl+<span class="string">&quot; | &quot;</span>+_urls.RegisterUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结果截图<br><img src="https://img.picgo.net/2025/06/17/-2025-06-17-20322013f05ec2ebb39533.png" alt="屏幕截图 2025 06 17 203220"></li></ol><h3 id="核心优势"><a href="#核心优势" class="headerlink" title="核心优势"></a>核心优势</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">✔️ 编译时类型检查</span><br><span class="line">✔️ IDE智能提示支持</span><br><span class="line">✔️ 配置集中化管理</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❗ 配置变更需要重启应用</span><br><span class="line">❗ 需手动处理配置验证</span><br></pre></td></tr></table></figure><h2 id="方案三：IOptionsSnapshot-请求级配置"><a href="#方案三：IOptionsSnapshot-请求级配置" class="headerlink" title="方案三：IOptionsSnapshot (请求级配置)"></a>方案三：IOptionsSnapshot (请求级配置)</h2><p>核心特性</p><ul><li><p><strong>Scoped生命周期：每个请求获取新实例</strong></p></li><li><p><strong>自动热更新：配置变更时下次请求生效</strong></p></li><li><p><strong>自动验证：支持数据注解验证</strong></p></li></ul><p>实现步骤</p><ol><li>定义配置类<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FruitPrices</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Apple &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Banana &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在program.cs中注册配置类<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意在net6.0以下版本，需要在Startup中注册的configureServices中注册</span></span><br><span class="line"><span class="comment">//在net6.0以上版本，Startup 已经合并到program中，可以直接在program中添加服务，但是要在builder.Build();之前</span></span><br><span class="line">builder.Services.AddOptions&lt;FruitPrices&gt;();</span><br><span class="line">builder.Services.Configure&lt;FruitPrices&gt;(builder.Configuration.GetSection(<span class="string">&quot;FruitPrices&quot;</span>));</span><br></pre></td></tr></table></figure></li><li>在控制器中注入使用<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> FruitPrices _fruitPricesIOptionsSnapshot;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestController</span>(<span class="params">IOptionsSnapshot&lt;FruitPrices&gt; fruitPrices</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _fruitPricesIOptionsSnapshot = fruitPrices.Value;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;GetConfigerDataAboutFruitPrices&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">GetConfigerDataAboutFruitPrices</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Ok(_fruitPricesIOptionsSnapshot.Apple +<span class="string">&quot; | &quot;</span>+_fruitPricesIOptionsSnapshot.Banana);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结果截图<br><img src="https://img.picgo.net/2025/06/17/-2025-06-17-203340059183893b96e992.png" alt="屏幕截图 2025 06 17 203340"></li></ol><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">🔧 适用于需要请求级隔离的配置</span><br><span class="line">🔧 配置变更频繁但QPS不高的场景</span><br><span class="line">⚠️ 高并发场景慎用（每次请求创建新实例）</span><br></pre></td></tr></table></figure><h2 id="方案四：IOptionsMonitor-动态全局配置"><a href="#方案四：IOptionsMonitor-动态全局配置" class="headerlink" title="方案四：IOptionsMonitor (动态全局配置)"></a>方案四：IOptionsMonitor (动态全局配置)</h2><p>核心优势</p><ul><li><p><strong>Singleton生命周期：单例模式高性能</strong></p></li><li><p><strong>实时热更新：配置变更立即生效</strong></p></li><li><p><strong>变更通知：支持监听配置变化事件</strong></p></li></ul><p>实现步骤</p><ol><li>定义配置类<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhonePrices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> iPhone &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Samsung &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在program.cs中注册配置类<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意在net6.0以下版本，需要在Startup中注册的configureServices中注册</span></span><br><span class="line"><span class="comment">//在net6.0以上版本，Startup 已经合并到program中，可以直接在program中添加服务，但是要在builder.Build();之前</span></span><br><span class="line">builder.Services.AddOptions&lt;PhonePrices&gt;();</span><br><span class="line">builder.Services.Configure&lt;PhonePrices&gt;(builder.Configuration.GetSection(<span class="string">&quot;PhonePrices&quot;</span>));</span><br></pre></td></tr></table></figure></li><li>在控制器中注入使用<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意在net6.0以下版本，需要在Startup中注册的configureServices中注册</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOptionsMonitor&lt;PhonePrices&gt; _phonePricesIOptionsMonitor;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestController</span>(<span class="params">IOptionsMonitor&lt;PhonePrices&gt; phonePrices</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _phonePricesIOptionsMonitor = phonePrices;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;GetConfigerDataAboutPhonePrices&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">GetConfigerDataAboutPhonePrices</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Ok(_phonePricesIOptionsMonitor.CurrentValue.iPhone +<span class="string">&quot; | &quot;</span>+_phonePricesIOptionsMonitor.CurrentValue.Samsung);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结果截图<br><img src="https://img.picgo.net/2025/06/17/-2025-06-17-2034530af075b9baad696c.png" alt="屏幕截图 2025 06 17 203453"></p><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">🚀 全局动态配置（如功能开关）</span><br><span class="line">🚀 高并发服务的配置读取</span><br><span class="line">🚀 需要实时响应配置变更的场景</span><br></pre></td></tr></table></figure><h3 id="生命周期对比图"><a href="#生命周期对比图" class="headerlink" title="生命周期对比图"></a>生命周期对比图</h3><p><img src="https://img.picgo.net/2025/06/17/LifePicaa56538abe13914e.png" alt="LifePic"></p><h3 id="四种配置读取方案对比"><a href="#四种配置读取方案对比" class="headerlink" title="四种配置读取方案对比"></a>四种配置读取方案对比</h3><table><thead><tr><th align="left">方案</th><th align="left">生命周期</th><th align="left">热更新支持</th><th align="left">适用场景</th><th align="left">典型代码示例</th></tr></thead><tbody><tr><td align="left">IConfiguration</td><td align="left">Singleton</td><td align="left">❌</td><td align="left">快速读取简单配置</td><td align="left">_configuration[“Emails:DefaultEmail”]</td></tr><tr><td align="left">自定义类绑定</td><td align="left">自定义</td><td align="left">❌</td><td align="left">静态配置的简单对象映射</td><td align="left">_urls.LoginUrl</td></tr><tr><td align="left">IOptionsSnapshot</td><td align="left">Scoped</td><td align="left">✅</td><td align="left">请求级配置(需注意性能开销)</td><td align="left">_fruitPricesIOptionsSnapshot.Apple</td></tr><tr><td align="left">IOptionsMonitor</td><td align="left">Singleton</td><td align="left">✅</td><td align="left">全局动态配置(推荐热更新场景)</td><td align="left">_phonePricesIOptionsMonitor.CurrentValue.iPhone</td></tr></tbody></table><h3 id="决策指南：如何选择？"><a href="#决策指南：如何选择？" class="headerlink" title="决策指南：如何选择？"></a>决策指南：如何选择？</h3><ol><li><p>简单静态配置<br>→ 选择自定义类绑定（方案二）</p></li><li><p>单个配置项快速访问<br>→ 选择IConfiguration（方案一）</p></li><li><p>需要请求级隔离的配置<br>→ 选择IOptionsSnapshot（方案三）<br>⚠️ 注意评估性能开销</p></li><li><p>动态全局配置（生产首选）<br>→ 选择IOptionsMonitor（方案四）</p></li></ol><blockquote><p>在最近的线上服务监控显示：使用IOptionsMonitor的方案相比IOptionsSnapshot，在高并发场景下(&gt;1000QPS)可降低35%的内存开销和20%的GC压力。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是AspNetCore 及现在的AspNetCore怎么样</title>
      <link href="/2025/06/17/%E4%BB%80%E4%B9%88%E6%98%AFAspNetCore-%E5%8F%8A%E7%8E%B0%E5%9C%A8%E7%9A%84AspNetCore%E6%80%8E%E4%B9%88%E6%A0%B7/"/>
      <url>/2025/06/17/%E4%BB%80%E4%B9%88%E6%98%AFAspNetCore-%E5%8F%8A%E7%8E%B0%E5%9C%A8%E7%9A%84AspNetCore%E6%80%8E%E4%B9%88%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h1 id="什么是AspNetCore？"><a href="#什么是AspNetCore？" class="headerlink" title="什么是AspNetCore？"></a>什么是AspNetCore？</h1><p>我知道，一提起“.NET开发Web应用”，很多人脑子里还是那个画面：Visual Studio 装在 Windows 上，代码最终部署在<br> IIS 服务器里，整个生态牢牢绑在微软的平台上。这印象没错——但那已经是 2014 年开源之前的 ASP.NET (Framework) 了。<br>但是在 2016 年，微软迈出了关键一步：开源并发布了 ASP.NET Core。这不是小修小补，而是一次彻底的、面向云原生<br>时代的重构。是最核心的改变之一，也是很多人至今还不知道的：</p><h1 id="ASP-NET-Core：别误会，它早就不是“Windows专属”了"><a href="#ASP-NET-Core：别误会，它早就不是“Windows专属”了" class="headerlink" title="ASP.NET Core：别误会，它早就不是“Windows专属”了"></a>ASP.NET Core：别误会，它早就不是“Windows专属”了</h1><p><strong>ASP.NET Core 是一个成熟的跨平台框架。</strong></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul><li>你可以在 <strong>Windows</strong> 上写代码</li><li>同样可以在 <strong>macOS</strong> 上用 Visual Studio for Mac 或 VS Code + C# Dev Kit 开发</li><li>在 <strong>Linux</strong> (Ubuntu, Fedora 等) 上用 VS Code 写</li><li>编辑器自由度高</li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>编译好的应用可以在 <strong>Windows 服务器</strong>运行</li><li>更重要的是：能直接跑在 <strong>Linux 服务器</strong>上 (Nginx&#x2F;Apache 后或独立)</li><li>也能跑在 <strong>macOS</strong> 上</li><li>不再强制依赖 IIS</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li>塞进轻量级 <strong>Docker 容器</strong> (Linux&#x2F;Windows Nano Server 镜像)</li><li>部署到任意支持容器的平台：<ul><li>Azure Kubernetes Service (AKS)</li><li>AWS ECS&#x2F;EKS</li><li>Google GKE</li><li>自建 Linux 服务器集群</li></ul></li><li>部署环境选择权完全自主</li></ul><h2 id="为什么能跨平台？关键在-NET-Core-NET-5"><a href="#为什么能跨平台？关键在-NET-Core-NET-5" class="headerlink" title="为什么能跨平台？关键在 .NET Core &#x2F; .NET 5+"></a>为什么能跨平台？关键在 .NET Core &#x2F; .NET 5+</h2><p>ASP.NET Core 的基石是：</p><ul><li><strong>.NET Core</strong> (2016-2020)</li><li>统一的继任者 <strong>.NET 5&#x2F;6&#x2F;7&#x2F;8</strong> (2020.11起)</li></ul><p>这个全新的运行时环境 (.NET Runtime) 跨平台设计的核心：</p><h3 id="剥离系统依赖"><a href="#剥离系统依赖" class="headerlink" title="剥离系统依赖"></a>剥离系统依赖</h3><p>不再深度绑定 Windows API，通过 <strong>.NET BCL</strong> (基础类库) 提供统一接口，底层针对不同操作系统独立实现。</p><h3 id="开源驱动"><a href="#开源驱动" class="headerlink" title="开源驱动"></a>开源驱动</h3><ul><li>整个项目在 <strong>GitHub (.dotnet)</strong> 完全开源</li><li>由微软和社区开发者共同维护</li><li>Linux&#x2F;macOS 支持依赖社区贡献验证</li></ul><h3 id="现代化设计"><a href="#现代化设计" class="headerlink" title="现代化设计"></a>现代化设计</h3><p>从底层为高性能、模块化和云环境优化，甩掉历史包袱。</p><h2 id="跨平台的实际好处"><a href="#跨平台的实际好处" class="headerlink" title="跨平台的实际好处"></a>跨平台的实际好处</h2><ol><li><p><strong>基础设施成本与灵活性</strong></p><ul><li>摆脱 Windows Server 授权费</li><li>利用低成本 Linux 服务器资源</li><li>天然适配 Docker&#x2F;Kubernetes</li></ul></li><li><p><strong>开发团队自由</strong></p><ul><li>开发者可自由选择 Windows&#x2F;macOS&#x2F;Linux 开发机</li><li>工具链自由：VS&#x2F;VS for Mac&#x2F;VS Code&#x2F;Rider</li></ul></li><li><p><strong>技术栈统一</strong></p><ul><li>与 Node.js&#x2F;Python&#x2F;Go 等共存于 Linux 环境</li><li>运维体系标准化</li></ul></li><li><p><strong>拥抱开源生态</strong></p><ul><li>无缝集成 Linux 为主的 DevOps 流程</li><li>兼容主流云平台</li></ul></li></ol><h2 id="“开源”不是噱头，是现实"><a href="#“开源”不是噱头，是现实" class="headerlink" title="“开源”不是噱头，是现实"></a>“开源”不是噱头，是现实</h2><ul><li><strong>代码可见</strong>：所有核心代码 GitHub 公开</li><li><strong>社区决策</strong>：路线图&#x2F;重大设计在 GitHub Issues 公开讨论</li><li><strong>社区贡献</strong>：大量功能改进&#x2F;Bug修复来自社区</li><li><strong>独立治理</strong>：在 <strong>.NET 基金会</strong> 支持下运作</li></ul><h2 id="谁在用？不只是微软系"><a href="#谁在用？不只是微软系" class="headerlink" title="谁在用？不只是微软系"></a>谁在用？不只是微软系</h2><table><thead><tr><th>公司类型</th><th>代表案例</th></tr></thead><tbody><tr><td>技术社区</td><td>Stack Overflow 核心后端</td></tr><tr><td>开发工具</td><td>JetBrains Rider 后端服务</td></tr><tr><td>工业&#x2F;企业级</td><td>Siemens&#x2F;UPS&#x2F;波音</td></tr><tr><td>金融&#x2F;医疗科技</td><td>众多公司（看重性能&#x2F;安全性）</td></tr><tr><td>初创公司</td><td>看重开发效率&#x2F;部署灵活性</td></tr></tbody></table><h2 id="总结：该刷新认知了"><a href="#总结：该刷新认知了" class="headerlink" title="总结：该刷新认知了"></a>总结：该刷新认知了</h2><blockquote><p>如果对 .NET Web 开发的印象还停留在 <strong>“Windows + IIS + 闭源”</strong> 的时代，是时候更新了。</p></blockquote><p><strong>ASP.NET Core (基于 .NET 5&#x2F;6&#x2F;7&#x2F;8) 的本质：</strong></p><pre><code class="plaintext">✅ 完全开源✅ 真正跨平台 (Win/Linux/macOS)✅ 高性能模块化设计✅ 云原生/微服务优先它提供：一流的开发体验（C# 强类型 + 成熟工具链）出色的运行时性能深度融入 Linux/容器为核心的现代基础设施生态所以下次技术选型时，咱也可以考虑一下AspNetCore。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记</title>
      <link href="/2024/12/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><p>目录：<br>第1章 绪论</p><p>1.1 什么是数据结构<br>1.1.1 数据结构的定义<br>1.1.2 逻辑结构<br>1.1.3 存储结构<br>1.1.4 数据运算<br>1.1.5 数据类型和抽象数据类型<br>1.2 算法及其描述<br>1.2.1 什么是算法<br>1.2.2 算法设计的目标<br>1.2.3 算法描述<br>1.3 算法分析<br>1.3.1 算法分析概述<br>1.3.2 算法时间性能分析<br>1.3.3 算法空间性能分析<br>1.4 数据结构+算法&#x3D;程序<br>1.4.1 程序和数据结构<br>1.4.2 算法和程序<br>1.4.3 算法和数据结构<br>1.4.4 数据结构的发展<br>第2章 线性表</p><p>2.1 线性表及其逻辑结构<br>2.2 线性表的顺序存储结构<br>2.3 线性表的链式存储结构<br>2.4 线性表的应用<br>第3章 栈和队列</p><p>3.1 栈<br>3.2 队列<br>第4章 串</p><p>4.1 串的概念与模式匹配算法<br>第5章 递归</p><p>5.1 递归算法的设计方法<br>第6章 数组和广义表</p><p>6.1 数组<br>6.2 稀疏矩阵<br>6.3 广义表<br>第7章 树和二叉树</p><p>7.1 树<br>7.2 二叉树<br>7.3 树和森林<br>第8章 图</p><p>8.1 图的概念<br>8.2 图的存储结构<br>8.3 图的遍历<br>8.4 图的特殊应用<br>第9章 查找</p><p>9.1 查找算法的实现<br>第10章 内排序</p><p>10.1 内排序算法的实现<br>第11章 外排序</p><p>11.1 外排序算法的实现</p><p>下载链接：<a href="https://www.hostize.com/zh/v/ssWxJPtpmI">https://www.hostize.com/zh/v/ssWxJPtpmI</a></p>]]></content>
      
      
      <categories>
          
          <category> 文件下载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发现一个不错的使用前端的AIV0.dev</title>
      <link href="/2024/11/29/%E5%8F%91%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84%E4%BD%BF%E7%94%A8%E5%89%8D%E7%AB%AF%E7%9A%84AIV0-dev/"/>
      <url>/2024/11/29/%E5%8F%91%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84%E4%BD%BF%E7%94%A8%E5%89%8D%E7%AB%AF%E7%9A%84AIV0-dev/</url>
      
        <content type="html"><![CDATA[<div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM框架EntityFramework在ASP.NetCoreAPI中的应用</title>
      <link href="/2024/11/21/ORM%E6%A1%86%E6%9E%B6EntityFramework%E5%9C%A8ASP-NetCoreAPI%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2024/11/21/ORM%E6%A1%86%E6%9E%B6EntityFramework%E5%9C%A8ASP-NetCoreAPI%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h3 id="什么是EntityFrameworkCore？"><a href="#什么是EntityFrameworkCore？" class="headerlink" title="什么是EntityFrameworkCore？"></a>什么是EntityFrameworkCore？</h3><p>   EntityFramework Core 是微软推出的一个基于.Net Core 的轻量级ORM框架。ORM能够处理数据库与高级编程语言中<br>对象之间的映射关系，它能够将程序中的对象自动持久化到关系型数据库中，并能够将数据库中的数据信息自动映射到编<br>程语言中的对象，从而无须开发人员直接写SQL语句，使用EFCore能够明显的提高开发效率。关系型数据库的数据是存储在<br>由行和列组成的二维表格中，EFCore 在进行关系映射时，.Net 对象 与关系型数据库的构成元素有着一一对应的关系，注意<br>EFCore在应用程序与数据库之间起一个桥梁的作用。</p><table><thead><tr><th>.Net对象</th><th>关系型数据库</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>类的属性</td><td>列</td></tr><tr><td>.Net集合中的元素</td><td>行</td></tr><tr><td>int ID</td><td>主键</td></tr><tr><td>对其他类的引用</td><td>外键</td></tr></tbody></table><p>主键一般都是int型，唯一，由数据库自动生成。</p><h3 id="EFCore的使用"><a href="#EFCore的使用" class="headerlink" title="EFCore的使用"></a>EFCore的使用</h3><p>   EFCore有两种使用方法：第一种是代码优先，第二种是数据库优先。代码优先是指EFcore能够利用先创建好的实体类<br>创建数据库和表；而数据库优先则相反是利用先创建好的数据库和表生成与之匹配的实体类。</p><p>要使用代码优先，必须先创建一个实体类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">namespace AspApi02NOmvc.Models</span><br><span class="line">&#123;</span><br><span class="line">    public class UserModel</span><br><span class="line">    &#123;</span><br><span class="line">        public int Id &#123; get; set; &#125;//主键</span><br><span class="line">        public string? UserName &#123; get; set; &#125;</span><br><span class="line">        public string? PassWord &#123; get; set; &#125;</span><br><span class="line">        public string? UserMail &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>创建实体类后就需要了解一个类DbContext。</code></pre><p> DbContext位于Microsoft.EntityFrameworkCore命名空间下，代表程序与数据库之间会话或数据上下文，使用它能够<br> 完成查询和保存等操作;在程序中使用EFCore时，需要创建一个DbContext的派生类，在派生类中添加一个或<br> 若干个DbSet<Entity>类型的公共属性，这些属性表示相应实体的集合，对它们的操作最终会反映到数据库中的数据表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class DataContext:DbContext</span><br><span class="line">&#123;</span><br><span class="line">    public DataContext(DbContextOptions&lt;DataContext&gt; options) : base(options)//构造函数</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    public DbSet&lt;UserModel&gt; UserModels &#123; get; set; &#125;//实体集合</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>在appsettings.json中配置默认连接字符串,注意添加进去是否加 “,” 。json格式末尾键值对不加 “,” 。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;ConnectionStrings&quot;: &#123;</span><br><span class="line">  &quot;DefaultConnection&quot;: &quot;Server = localhost;DataBase = APIDbTest01;Trusted_Connection = true;TrustServerCertificate = true;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   然后就需要对EF进行配置。如果版本低于.Net 6.0，需要在Startup中进行配置，使用configureServices和configure方法;<br>在.Net 6.0及其以上版本，Startup 已经合并到program中，所以可以直接在program中添加服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line">var builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line">builder.Services.AddDbContext&lt;DataContext&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.UseSqlServer(builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;));//这里的连接字符串在配置文件中</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一个控制器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[ApiController]</span><br><span class="line">[Route(&quot;api/[controller]&quot;)]</span><br><span class="line">public class LoginController : Controller</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  private readonly DataContext _dataContext;</span><br><span class="line"></span><br><span class="line">      public LoginController(DataContext dataContext)</span><br><span class="line">          &#123;</span><br><span class="line">              _dataContext = dataContext;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">  [HttpPost(&quot;RegUser&quot;)]</span><br><span class="line">  public async Task &lt;ActionResult&gt; RegUser([FromForm]UserModel userModel)</span><br><span class="line">  &#123;</span><br><span class="line">      if (!ModelState.IsValid)&#123;return BadRequest(&quot;模型验证失败&quot;);&#125;</span><br><span class="line">      var user = new UserModel</span><br><span class="line">          &#123; //这里没让Id = userModel.Id 是因为Id是主键，应该让数据库自动生成。</span><br><span class="line">          UserName = userModel.UserName,</span><br><span class="line">          PassWord = userModel.PassWord,</span><br><span class="line">          UserMail = userModel.UserMail,</span><br><span class="line">          &#125;;</span><br><span class="line">      _dataContext.UserModels.Add(user);</span><br><span class="line">      await _dataContext.SaveChangesAsync();</span><br><span class="line">      return Ok(&quot;添加成功&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><pre><code>最后在程序包管理器控制台中使用命令Add-Migration 和Update-DataBase就可以完成数据库的迁移和数据库的创建。</code></pre><p>然后就可以运行API并创建数据了：</p><p><img src="https://img.picgo.net/2024/11/21/-2024-11-21-11211246b9175ff1ba561a.png" alt="屏幕截图 2024 11 21 112112"></p><p>如果使用postman调用api，需要注意传参，因为使用了[FromForm]特性，接收from表单，postman的传参设置为：</p><p><img src="https://img.picgo.net/2024/11/21/-2024-11-21-1110221a4570838089cef20.png" alt="屏幕截图 2024 11 21 111022(1)"></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粘包半包的解决方法</title>
      <link href="/2024/11/05/%E7%B2%98%E5%8C%85%E5%8D%8A%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/05/%E7%B2%98%E5%8C%85%E5%8D%8A%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h3 id="什么是粘包？"><a href="#什么是粘包？" class="headerlink" title="什么是粘包？"></a>什么是粘包？</h3><pre><code> 是指如果当发送端快速发送多条数据，但是接收端没有及时调用Receive，那么数据会在接收端的缓存中积累。</code></pre><p>例如：当发送端先发送“1，2，3，4”四个字节，紧接着又发送“5，6，7，8”四个字节的数据；等到接收端调用Receive的<br>时候，接收端的操作系统已经将接收到的全部数据写入缓存区，共接收到“8”个字节。</p><h3 id="什么是半包？"><a href="#什么是半包？" class="headerlink" title="什么是半包？"></a>什么是半包？</h3><pre><code> 也就是当发送端发送的数据太长了，但是接收端的缓存区没有足够的空间接收全部数据，就会接收一部分数据，另一</code></pre><p>部分等下一次调用Receive的时候在接收。<br>例如：发送端发送：asdfghjkl，但是接收端只剩下三个字节的空间，此时接收端接收“asd”，等到下一次调用Receive时再<br>接收fghjkl。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><h4 id="一-长度信息法："><a href="#一-长度信息法：" class="headerlink" title="一.长度信息法："></a>一.长度信息法：</h4><pre><code> 在每一个数据包前面加上长度信息，每次接收到数据包后先读取表示长度的字节，如果缓存区的数据长度大于要取的字</code></pre><p>节数，则取出相应的字节，否则等待下一次数据接收。</p><h4 id="二-固定长度法："><a href="#二-固定长度法：" class="headerlink" title="二.固定长度法："></a>二.固定长度法：</h4><pre><code> 每次都以固定的长度发送数据，若大小 “小于” 固定长度，则可以填入一些事先约定的符合占位凑数。</code></pre><h4 id="三-结束符号法："><a href="#三-结束符号法：" class="headerlink" title="三.结束符号法："></a>三.结束符号法：</h4><pre><code> 规定一个结束符号，作为消息间的分隔符；将每次接收到的消息字节，通过结束符分开。</code></pre><p>例如：规定一个结束符为“$” ；若接收到一条消息字节为“Helloworld$Iam”,则接收端先处理数据“Helloworld”，保留“Iam”<br>等到下一个“$”出现，将“Iam”和下一个“$”之间的数据粘在一起，作为一条完整的消息。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在C#中操作SQLserver数据库</title>
      <link href="/2024/11/04/%E5%9C%A8C-%E4%B8%AD%E6%93%8D%E4%BD%9CSQLserver%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/11/04/%E5%9C%A8C-%E4%B8%AD%E6%93%8D%E4%BD%9CSQLserver%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h2 id="创建C-“控制台应用（-net-framework）”"><a href="#创建C-“控制台应用（-net-framework）”" class="headerlink" title="创建C#“控制台应用（.net framework）”"></a>创建C#“控制台应用（.net framework）”</h2><h3 id="注意项目名为CsToSqlTest02，或者自行去改变命名空间。"><a href="#注意项目名为CsToSqlTest02，或者自行去改变命名空间。" class="headerlink" title="注意项目名为CsToSqlTest02，或者自行去改变命名空间。"></a>注意项目名为CsToSqlTest02，或者自行去改变命名空间。</h3><pre><code>  这段代码是一个C#控制台应用程序，它允许用户通过命令行界面与一个SQL Server数据库进行交互。程序提供了两个主要功能：向数据库插入数据（INSERT）和从数据库查询数据（SELECT）。</code></pre><h4 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Data.SqlClient;</span><br><span class="line">using System.Data;</span><br><span class="line">namespace CsToSqlTest02</span><br><span class="line">&#123;</span><br><span class="line">    internal class Program</span><br><span class="line">    &#123;</span><br><span class="line">            private static string ServeToDateBase = &quot;Server = localhost;DataBase = TestData02x01;Trusted_Connection = true;&quot;;//连接字符串，用于连接数据库</span><br><span class="line">            static string sqlSTR; //= $&quot;insert into UserDataTable_1(userid,userkeyword,username) values(&#x27;&#123;userid&#125;&#x27;,&#x27;&#123;userkeyword&#125;&#x27;,&#x27;&#123;username&#125;&#x27;)&quot;;</span><br><span class="line">            static string userid ;</span><br><span class="line">            static string userkeyword ;</span><br><span class="line">            static string username ;</span><br><span class="line">       </span><br><span class="line">         static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            string a;</span><br><span class="line">            Console.WriteLine(&quot;输入INSERT在数据库插入数据，输入SELECT查看数据库数据&quot;);</span><br><span class="line">            a = Console.ReadLine();</span><br><span class="line">            if (a == &quot;INSERT&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                CR();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (a == &quot;SELECT&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                CK();        </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (a != &quot;INSERT&quot; &amp;&amp; a != &quot;SELECT&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;指令错误&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;按任意键关闭&quot;);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void CR() </span><br><span class="line">        &#123;</span><br><span class="line">            string a;</span><br><span class="line">            Console.WriteLine(&quot;请输入ID，keyword，name&quot;);</span><br><span class="line">            userid = Console.ReadLine();</span><br><span class="line">            userkeyword = Console.ReadLine();</span><br><span class="line">            username = Console.ReadLine();</span><br><span class="line">            sqlSTR = $&quot;insert into UserDataTable_1(userid,userkeyword,username) values(&#x27;&#123;userid&#125;&#x27;,&#x27;&#123;userkeyword&#125;&#x27;,&#x27;&#123;username&#125;&#x27;)&quot;;</span><br><span class="line">            InsertSQLDateBase(sqlSTR);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;按SELECT进行查看，按INSERT继续进行插入,按C退出操作&quot;);</span><br><span class="line">            a = Console.ReadLine();</span><br><span class="line">            if (a == &quot;SELECT&quot;) &#123; CK(); &#125;</span><br><span class="line">            if (a == &quot;INSERT&quot;) &#123; CR(); &#125;</span><br><span class="line">            if(a == &quot;C&quot;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void CK() </span><br><span class="line">        &#123;</span><br><span class="line">            string a;</span><br><span class="line"></span><br><span class="line">            sqlSTR = &quot;select * from UserDataTable_1&quot;;</span><br><span class="line">            SelectSQLDateBase(sqlSTR);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;按SELECT进行查看，按INSERT继续进行插入,按C退出操作&quot;);</span><br><span class="line">            a = Console.ReadLine();</span><br><span class="line">            if (a == &quot;SELECT&quot;) &#123; CK(); &#125;</span><br><span class="line">            if (a == &quot;INSERT&quot;) &#123; CR(); &#125;</span><br><span class="line">            if (a == &quot;C&quot;) &#123; return; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public static void InsertSQLDateBase(string sqlSTR)</span><br><span class="line">        &#123;</span><br><span class="line">            SqlConnection conn = new SqlConnection();</span><br><span class="line">            conn.ConnectionString = ServeToDateBase;</span><br><span class="line">            conn.Open();</span><br><span class="line"></span><br><span class="line">            SqlCommand cmd = new SqlCommand(sqlSTR, conn);</span><br><span class="line">            int result = cmd.ExecuteNonQuery();</span><br><span class="line">            if (result &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($&quot;执行新增语句,受影响的行数&#123;result&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            conn.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void SelectSQLDateBase(string sqlSTR) </span><br><span class="line">        &#123;</span><br><span class="line">        SqlConnection con = new SqlConnection();</span><br><span class="line">            con.ConnectionString = ServeToDateBase;</span><br><span class="line">            con.Open();</span><br><span class="line"></span><br><span class="line">        SqlCommand cmd = new SqlCommand(sqlSTR, con);</span><br><span class="line">            SqlDataAdapter adapter = new SqlDataAdapter();</span><br><span class="line">            adapter.SelectCommand = cmd;</span><br><span class="line"></span><br><span class="line">        DataSet ds = new DataSet();</span><br><span class="line">           adapter.Fill(ds);</span><br><span class="line">            con.Close();</span><br><span class="line">            DataTable dt = ds.Tables[0];</span><br><span class="line">            for (int i = 0; i &lt; dt.Rows.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($&quot;&#123;dt.Rows[i][&quot;userid&quot;]&#125;  &#123;dt.Rows[i][&quot;userkeyword&quot;]&#125;  &#123;dt.Rows[i][&quot;username&quot;]&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一：连接字符串和变量声明"><a href="#一：连接字符串和变量声明" class="headerlink" title="一：连接字符串和变量声明"></a>一：连接字符串和变量声明</h3><pre><code> 这里定义了数据库连接字符串ServeToDateBase，它包含了服务器地址、数据库名和连接方式（这里使用的是Windows身份验证）。 同时声明了三个静态字符串变量用于存储用户输入的ID、关键词和名称，以及一个用于构建SQL语句的字符串变量sqlSTR。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private static string ServeToDateBase = &quot;Server = localhost;DataBase = TestData02x01;Trusted_Connection = true;&quot;;//连接字符串，用于连接数据库</span><br><span class="line">static string sqlSTR; //= $&quot;insert into UserDataTable_1(userid,userkeyword,username) values(&#x27;&#123;userid&#125;&#x27;,&#x27;&#123;userkeyword&#125;&#x27;,&#x27;&#123;username&#125;&#x27;)&quot;;</span><br><span class="line">static string userid ;</span><br><span class="line">static string userkeyword ;</span><br><span class="line">static string username ;</span><br></pre></td></tr></table></figure><h3 id="二：插入数据库方法（InsertSQLDateBase）"><a href="#二：插入数据库方法（InsertSQLDateBase）" class="headerlink" title="二：插入数据库方法（InsertSQLDateBase）"></a>二：插入数据库方法（InsertSQLDateBase）</h3><pre><code> InsertSQLDateBase方法使用提供的SQL语句打开数据库连接，执行插入操作，并根据受影响的行数给出反馈。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void InsertSQLDateBase(string sqlSTR)</span><br><span class="line">  &#123;</span><br><span class="line">      SqlConnection conn = new SqlConnection();</span><br><span class="line">      conn.ConnectionString = ServeToDateBase;</span><br><span class="line">      conn.Open();</span><br><span class="line"></span><br><span class="line">      SqlCommand cmd = new SqlCommand(sqlSTR, conn);</span><br><span class="line">      int result = cmd.ExecuteNonQuery();</span><br><span class="line">      if (result &gt; 0)</span><br><span class="line">          &#123;</span><br><span class="line">              Console.WriteLine($&quot;执行新增语句,受影响的行数&#123;result&#125;&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      conn.Close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="三：查询数据库方法（SelectSQLDateBase）"><a href="#三：查询数据库方法（SelectSQLDateBase）" class="headerlink" title="三：查询数据库方法（SelectSQLDateBase）"></a>三：查询数据库方法（SelectSQLDateBase）</h3><pre><code>  SelectSQLDateBase方法使用提供的SQL语句打开数据库连接，执行查询操作，并将结果填充到DataSet中。  然后关闭连接，并遍历结果集，将每行数据输出到控制台。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void SelectSQLDateBase(string sqlSTR) </span><br><span class="line">&#123;</span><br><span class="line">SqlConnection con = new SqlConnection();</span><br><span class="line">    con.ConnectionString = ServeToDateBase;</span><br><span class="line">    con.Open();</span><br><span class="line"></span><br><span class="line">SqlCommand cmd = new SqlCommand(sqlSTR, con);</span><br><span class="line">    SqlDataAdapter adapter = new SqlDataAdapter();</span><br><span class="line">    adapter.SelectCommand = cmd;</span><br><span class="line"></span><br><span class="line">DataSet ds = new DataSet();</span><br><span class="line">   adapter.Fill(ds);</span><br><span class="line">    con.Close();</span><br><span class="line">    DataTable dt = ds.Tables[0];</span><br><span class="line">    for (int i = 0; i &lt; dt.Rows.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine($&quot;&#123;dt.Rows[i][&quot;userid&quot;]&#125;  &#123;dt.Rows[i][&quot;userkeyword&quot;]&#125;  &#123;dt.Rows[i][&quot;username&quot;]&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在使用SQLserver数据库时可能遇见的问题"><a href="#在使用SQLserver数据库时可能遇见的问题" class="headerlink" title="在使用SQLserver数据库时可能遇见的问题"></a>在使用SQLserver数据库时可能遇见的问题</h2><h3 id="显示无法连接到服务器"><a href="#显示无法连接到服务器" class="headerlink" title="显示无法连接到服务器"></a>显示无法连接到服务器</h3><p> 如下<br> <img src="https://img.picgo.net/2024/11/04/-2024-11-04-2217010e587c3d827bca00.png" alt="屏幕截图 2024 11 04 221701"></p><h3 id="解决方法：找到下面这个界面，也就是SQLsever配置管理器。"><a href="#解决方法：找到下面这个界面，也就是SQLsever配置管理器。" class="headerlink" title="解决方法：找到下面这个界面，也就是SQLsever配置管理器。"></a>解决方法：找到下面这个界面，也就是SQLsever配置管理器。</h3><p> 找到配置管理器中的SQLserver服务</p><p> <img src="https://img.picgo.net/2024/11/04/-2024-11-04-221734fdebf7348b7a997b.png" alt="屏幕截图 2024 11 04 221734"></p><p> 将其全部开启这时再去连接数据库就没问题了。</p><p> 最后附上数据库名称。和数据表名称：</p><p> <img src="https://img.picgo.net/2024/11/04/-2024-11-04-222346b7d000fa61a58ef5.png" alt="屏幕截图 2024 11 04 222346"></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在C#中通过QQ邮箱SMTP服务发送邮件</title>
      <link href="/2024/11/04/%E5%9C%A8C-%E4%B8%AD%E9%80%9A%E8%BF%87QQ%E9%82%AE%E7%AE%B1SMTP%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2024/11/04/%E5%9C%A8C-%E4%B8%AD%E9%80%9A%E8%BF%87QQ%E9%82%AE%E7%AE%B1SMTP%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h2 id="C-与SMTP服务简单应用"><a href="#C-与SMTP服务简单应用" class="headerlink" title="C#与SMTP服务简单应用"></a>C#与SMTP服务简单应用</h2><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><p> 主要是注意记得去开启SMTP服务，和获取授权码（开启服务后，会自动给用户）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Mail;</span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    public static string mailLocalAdd ;//发件人邮箱</span><br><span class="line">    public static string SendToMailAdd ;//收件人邮箱</span><br><span class="line">    public static string keyword ;//SMTP授权码</span><br><span class="line">    public static string mailname;//发件人名称</span><br><span class="line"></span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            MailMessage mailMessage = new MailMessage();</span><br><span class="line">            Console.WriteLine(&quot;发件人邮箱：&quot;);</span><br><span class="line">            mailLocalAdd = Console.ReadLine();</span><br><span class="line">            Console.WriteLine(&quot;发件人名称：&quot;);</span><br><span class="line">            mailname = Console.ReadLine();</span><br><span class="line">            Console.WriteLine(&quot;收件人邮箱：&quot;);</span><br><span class="line">            SendToMailAdd = Console.ReadLine();</span><br><span class="line">            Console.WriteLine(&quot;发件人邮箱的SMTP授权码：&quot;);</span><br><span class="line">            keyword = Console.ReadLine();   </span><br><span class="line">            mailMessage.From = new MailAddress(mailLocalAdd, mailname, System.Text.Encoding.UTF8);//asgte 为发件人的地址及名称。</span><br><span class="line">            mailMessage.To.Add(new MailAddress(SendToMailAdd));//收信人地址</span><br><span class="line">            mailMessage.Bcc.Add(new MailAddress(SendToMailAdd));//添加密送人</span><br><span class="line">            mailMessage.Subject = &quot;C#利用QQ邮箱SMTP服务发送邮件&quot;; //这是主题</span><br><span class="line">            mailMessage.SubjectEncoding = System.Text.Encoding.UTF8;</span><br><span class="line">            mailMessage.IsBodyHtml = false; //是否将邮件主体设置为html格式</span><br><span class="line">            Console.WriteLine(&quot;输入邮件正文：&quot;);</span><br><span class="line">            mailMessage.Body = Console.ReadLine();  //这是邮件正文</span><br><span class="line">            mailMessage.BodyEncoding = System.Text.Encoding.UTF8;</span><br><span class="line">            SmtpClient smtpClient = new SmtpClient(&quot;smtp.qq.com&quot;, 587); //QQ邮箱的SMTP服务器域名与端口</span><br><span class="line">            smtpClient.EnableSsl = true;//是否使用ssl加密</span><br><span class="line">            smtpClient.Credentials = new NetworkCredential(mailLocalAdd, keyword);//设置登录凭证，这里的keyword为你的邮箱的SMTP授权码</span><br><span class="line">            smtpClient.Send(mailMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123; Console.WriteLine(&quot;EX:&quot; + ex.Message); &#125;</span><br><span class="line">        Console.WriteLine(&quot;按任意键关闭……&quot;);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SMTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在C#中通过url获取页面HTML文档</title>
      <link href="/2024/11/04/%E5%9C%A8C-%E4%B8%AD%E9%80%9A%E8%BF%87url%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2HTML%E6%96%87%E6%A1%A3/"/>
      <url>/2024/11/04/%E5%9C%A8C-%E4%B8%AD%E9%80%9A%E8%BF%87url%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2HTML%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h2 id="这个简单直接上代码"><a href="#这个简单直接上代码" class="headerlink" title="这个简单直接上代码:"></a>这个简单直接上代码:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Net.Http;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static async Task Main()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;输入url地址：&quot;);</span><br><span class="line">        string url = Console.ReadLine(); </span><br><span class="line">        using (HttpClient client = new HttpClient())</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                HttpResponseMessage response = await client.GetAsync(url);</span><br><span class="line">                string content = await response.Content.ReadAsStringAsync();</span><br><span class="line">                Console.WriteLine(content);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (HttpRequestException HRex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;请求失败： &quot; + HRex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex) </span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;请求失败：&quot; + ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadLine(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="你猜的没错，这篇就是凑数的"><a href="#你猜的没错，这篇就是凑数的" class="headerlink" title="你猜的没错，这篇就是凑数的"></a>你猜的没错，这篇就是凑数的</h4>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于C#的远程注册功能实现</title>
      <link href="/2024/11/04/%E5%9F%BA%E4%BA%8EC-%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%9C%E7%A8%8B%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/11/04/%E5%9F%BA%E4%BA%8EC-%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%9C%E7%A8%8B%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h1 id="通过Tcp进行远程连接，SQL-server进行数据存储，QQ邮箱发送注册验证码"><a href="#通过Tcp进行远程连接，SQL-server进行数据存储，QQ邮箱发送注册验证码" class="headerlink" title="通过Tcp进行远程连接，SQL server进行数据存储，QQ邮箱发送注册验证码"></a>通过Tcp进行远程连接，SQL server进行数据存储，QQ邮箱发送注册验证码</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>   本文项目可以，在远程主机上通过客户端与服务端的Tcp连接进行通信，然后利用邮箱发送验证码在服务端完成验证并且注册，当验证在服务端通过后，<br>，服务端将会把用户信息保存在SQL server的数据库中。注意使用QQ在服务端发送消息，需要先在QQ邮箱开启SMTP服务，然后保存授权码。</p><h2 id="步骤一：在VisualStudio中创建一个“控制台应用（-net-framework）”的新项目FWDBx02。"><a href="#步骤一：在VisualStudio中创建一个“控制台应用（-net-framework）”的新项目FWDBx02。" class="headerlink" title="步骤一：在VisualStudio中创建一个“控制台应用（.net framework）”的新项目FWDBx02。"></a>步骤一：在VisualStudio中创建一个“控制台应用（.net framework）”的新项目FWDBx02。</h2><p>   项目命名为：FWDBx02 。包含四个部分：Program.cs(主体);MailSendControls.cs(邮件控制);SQLcontrols.cs(数据库控制);<br>ProtocolControls.cs(验证处理控制)。</p><h3 id="Program-cs代码如下："><a href="#Program-cs代码如下：" class="headerlink" title="Program.cs代码如下："></a>Program.cs代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line"></span><br><span class="line">namespace FWDBx02</span><br><span class="line">&#123;</span><br><span class="line">    internal class Program</span><br><span class="line">    &#123;</span><br><span class="line">        private static List&lt;string&gt; DataList = new List&lt;string&gt;();</span><br><span class="line">        private static string asd;</span><br><span class="line">        private static string userReturn;</span><br><span class="line">        public static string asduserID;</span><br><span class="line">        private static string userID;</span><br><span class="line">        public static string asduserkeyword;</span><br><span class="line">        private static string userkeyword;</span><br><span class="line">        private static string CAPTCHAstr;</span><br><span class="line">        public static string asdsendMAIL;</span><br><span class="line">        private static string sendMAIL;</span><br><span class="line">        public static byte[] receiveBuffer = new byte[1024];</span><br><span class="line">        public static string receiveSTR;</span><br><span class="line">        public static IPAddress ipAddress; </span><br><span class="line">        public static int portINT; </span><br><span class="line">        public static IPEndPoint iPEndPoint;</span><br><span class="line">        public static Socket socket;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;这里是服务端：&quot;);</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;输入服务器IP：&quot;);</span><br><span class="line">                ipAddress = IPAddress.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(&quot;输入开放端口：&quot;);</span><br><span class="line">                portINT = int.Parse(Console.ReadLine());</span><br><span class="line">                iPEndPoint = new IPEndPoint(ipAddress, portINT);</span><br><span class="line">                socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">                socket.Bind(iPEndPoint);</span><br><span class="line"></span><br><span class="line">                socket.Listen(10);</span><br><span class="line">                socket.BeginAccept(AcceptCallback,socket);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SocketException se) &#123; Console.WriteLine(&quot;MAINse:&quot;+se.Message); &#125;</span><br><span class="line">            catch (Exception ex) &#123; Console.WriteLine(&quot;MAINex:&quot;+ex.Message); &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static void AcceptCallback(IAsyncResult ar)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Socket socket = (Socket)ar.AsyncState;</span><br><span class="line">                Socket clientSocket = socket.EndAccept(ar);</span><br><span class="line">                clientSocket.BeginReceive(receiveBuffer,0,1024,0,ReceiveCallback,clientSocket);</span><br><span class="line">                socket.BeginAccept(AcceptCallback, socket);</span><br><span class="line">            &#125; </span><br><span class="line">            catch (SocketException se) &#123; Console.WriteLine(&quot;ACBse:&quot;+se.Message);&#125;</span><br><span class="line">            catch (Exception ex) &#123; Console.WriteLine(&quot;ACBex:&quot;+ex.Message); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static void ReceiveCallback(IAsyncResult ar)</span><br><span class="line">        &#123;</span><br><span class="line">            //try </span><br><span class="line">            //&#123;</span><br><span class="line">                Socket clientSocket = (Socket)ar.AsyncState;</span><br><span class="line">                int con = clientSocket.EndReceive(ar);</span><br><span class="line">                receiveSTR = System.Text.Encoding.UTF8.GetString(receiveBuffer, 0, con);</span><br><span class="line">                Console.WriteLine(receiveSTR);//*</span><br><span class="line">                    ProcessingUSER(receiveSTR);</span><br><span class="line">                ///</span><br><span class="line">                clientSocket.BeginReceive(receiveBuffer, 0, 1024, 0, ReceiveCallback, clientSocket);</span><br><span class="line">            //&#125;</span><br><span class="line">            //catch (SocketException se) &#123; Console.WriteLine(&quot;RCBse:&quot;+se.Message);&#125;</span><br><span class="line">            //catch (Exception ex) &#123; Console.WriteLine(&quot;RCBex:&quot;+ex.Message);&#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static void ProcessingUSER(string receiveSTR) </span><br><span class="line">        &#123;</span><br><span class="line">            ProtocolControls protocolControls = new ProtocolControls(receiveSTR);</span><br><span class="line">            CAPTCHAstr = protocolControls.captchaSTR;//用户发送信息第一波产生的验证码</span><br><span class="line">            asd = CAPTCHAstr;</span><br><span class="line">            sendMAIL = protocolControls.SENDMAIL;</span><br><span class="line">            asdsendMAIL = sendMAIL;</span><br><span class="line">            userID = protocolControls.USRID; </span><br><span class="line">            asduserID = userID;</span><br><span class="line">            userkeyword = protocolControls.USRKEYWORD;</span><br><span class="line">            asduserkeyword = userkeyword;</span><br><span class="line">            DataList.Add(asduserID);</span><br><span class="line">            DataList.Add(asduserkeyword);</span><br><span class="line">            DataList.Add(asdsendMAIL);</span><br><span class="line">            //DataList.Add(CAPTCHAstr);</span><br><span class="line">            Console.WriteLine($&quot;&#123;asduserID&#125; &#123;asduserkeyword&#125; &#123;asdsendMAIL&#125;&quot;);</span><br><span class="line">            //222222/1234565/3623461767@qq.com</span><br><span class="line">            if (CAPTCHAstr != null) </span><br><span class="line">            &#123;   </span><br><span class="line">                userReturn = protocolControls.USRRETURN;</span><br><span class="line">                </span><br><span class="line">                MailSendControls mailSendControls = new MailSendControls(sendMAIL, CAPTCHAstr);</span><br><span class="line"></span><br><span class="line">            &#125;else if(userReturn == asd )</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($&quot;&#123;DataList[0]&#125; &#123;DataList[1]&#125; &#123;DataList[2]&#125;&quot;);</span><br><span class="line">                SQLcontrols sQLcontrols = new SQLcontrols(DataList[0], DataList[1], DataList[2]);        </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MailSendControls-cs代码如下："><a href="#MailSendControls-cs代码如下：" class="headerlink" title="MailSendControls.cs代码如下："></a>MailSendControls.cs代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">using System.Net;</span><br><span class="line">using System.Net.Mail;</span><br><span class="line"></span><br><span class="line">namespace FWDBx02</span><br><span class="line">&#123;</span><br><span class="line">    internal class MailSendControls//注册邮件发送</span><br><span class="line">    &#123;</span><br><span class="line">        private static string mailLocalAdd = &quot;你的邮箱&quot;;</span><br><span class="line">        private static string keyword = &quot;SMTP授权码&quot;;</span><br><span class="line">        private static string SendToMailAdd ;</span><br><span class="line">        private static string CAPTCHAstr;</span><br><span class="line">        public MailSendControls(string sendToMailAdd,string captchaSTR) </span><br><span class="line">        &#123;</span><br><span class="line">         SendToMailAdd = sendToMailAdd;</span><br><span class="line">            CAPTCHAstr = captchaSTR;</span><br><span class="line">            MailSend(SendToMailAdd, CAPTCHAstr);</span><br><span class="line">        &#125;</span><br><span class="line">        private void MailSend(string SendToMailAdd, string captchaSTR)</span><br><span class="line">        &#123;</span><br><span class="line">            MailMessage mailMessage = new MailMessage();</span><br><span class="line">            mailMessage.From = new MailAddress(mailLocalAdd, &quot;通信ID注册&quot;, System.Text.Encoding.UTF8);</span><br><span class="line"></span><br><span class="line">            mailMessage.To.Add(new MailAddress(SendToMailAdd));</span><br><span class="line">            mailMessage.Bcc.Add(new MailAddress(SendToMailAdd));</span><br><span class="line">            mailMessage.Subject = &quot;这是邮件的主题&quot;;</span><br><span class="line">            mailMessage.SubjectEncoding = System.Text.Encoding.UTF8;</span><br><span class="line"></span><br><span class="line">            mailMessage.IsBodyHtml = false;</span><br><span class="line">            mailMessage.Body = $&quot;注册验证码：&#123;captchaSTR&#125;&quot;;</span><br><span class="line">            mailMessage.BodyEncoding = System.Text.Encoding.UTF8;</span><br><span class="line"></span><br><span class="line">            SmtpClient smtpClient = new SmtpClient(&quot;smtp.qq.com&quot;, 587);</span><br><span class="line">            smtpClient.EnableSsl = true;</span><br><span class="line">            smtpClient.Credentials = new NetworkCredential(mailLocalAdd, keyword);</span><br><span class="line">            smtpClient.Send(mailMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQLcontrols-cs代码如下："><a href="#SQLcontrols-cs代码如下：" class="headerlink" title="SQLcontrols.cs代码如下："></a>SQLcontrols.cs代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line">namespace FWDBx02</span><br><span class="line">&#123;</span><br><span class="line">    internal class SQLcontrols//注册信息存入数据库</span><br><span class="line">    &#123;</span><br><span class="line">        //连接字符串</span><br><span class="line">        private static string serverToDateBase = &quot;Server = localhost;DataBase = TestA02x01;Trusted_Connection = true;&quot;;</span><br><span class="line">        //sql语句</span><br><span class="line">        private static string sqlSTR;  </span><br><span class="line">        private static string userid;</span><br><span class="line">        private static string userkeyword;</span><br><span class="line">        private static string usermail;</span><br><span class="line">        public SQLcontrols(string Userid,string Userkeyword,string Usermail)</span><br><span class="line">        &#123;</span><br><span class="line">            sqlSTR = $&quot;insert into userREGTable_1(userid,userkeyword,usermail) values(&#x27;&#123;Userid&#125;&#x27;,&#x27;&#123;Userkeyword&#125;&#x27;,&#x27;&#123;Usermail&#125;&#x27;)&quot;;</span><br><span class="line">            InsertSQLDB(sqlSTR);</span><br><span class="line">        &#125;</span><br><span class="line">        private static void InsertSQLDB (string SqlSTR)</span><br><span class="line">        &#123;</span><br><span class="line">        SqlConnection sqlConnection = new SqlConnection ();</span><br><span class="line">            sqlConnection.ConnectionString = serverToDateBase;//先连接，再打开</span><br><span class="line">            sqlConnection.Open ();</span><br><span class="line"></span><br><span class="line">        SqlCommand cmd = sqlConnection.CreateCommand ();</span><br><span class="line">            cmd.CommandText = sqlSTR;</span><br><span class="line">            cmd.Connection = sqlConnection;</span><br><span class="line">            int resultSQL = cmd.ExecuteNonQuery ();</span><br><span class="line">            sqlConnection.Close ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ProtocolControls-cs代码如下："><a href="#ProtocolControls-cs代码如下：" class="headerlink" title="ProtocolControls.cs代码如下："></a>ProtocolControls.cs代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace FWDBx02</span><br><span class="line">&#123;</span><br><span class="line">    internal class ProtocolControls //协议处理,将账号的注册并入协议处理</span><br><span class="line">    &#123;</span><br><span class="line">        class ProtocolTexts</span><br><span class="line">        &#123;</span><br><span class="line">            public ProtocolTexts() &#123; &#125;</span><br><span class="line">            public string reg = &quot;REG&quot;;</span><br><span class="line">            public string communication = &quot;COMM&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public string captchaSTR;</span><br><span class="line">        public string SENDMAIL;</span><br><span class="line">        public string USRID;</span><br><span class="line">        public string USRKEYWORD;</span><br><span class="line">        public string USRRETURN;</span><br><span class="line"></span><br><span class="line">        private static string receiveSTR;</span><br><span class="line">        char splitSTR = &#x27;/&#x27;;            //通过“/”分割信息</span><br><span class="line">        private static string[] parts;</span><br><span class="line">        private static int partsLength;</span><br><span class="line">        public ProtocolControls(string ReceiveSTR) </span><br><span class="line">        &#123;</span><br><span class="line">            receiveSTR = ReceiveSTR;</span><br><span class="line">            /////</span><br><span class="line">            //扫描接收信息字节是否有恶意（没写）</span><br><span class="line">            /////</span><br><span class="line">            ProtocolProcessing(receiveSTR);</span><br><span class="line">        &#125;</span><br><span class="line">        private void ProtocolProcessing( string receiveSTR) </span><br><span class="line">        &#123;</span><br><span class="line">            ProtocolTexts protocolTexts = new ProtocolTexts();</span><br><span class="line">            parts = receiveSTR.Split(splitSTR); </span><br><span class="line">            partsLength = parts.Length;</span><br><span class="line">           </span><br><span class="line">            if (parts[0] == protocolTexts.reg)</span><br><span class="line">            &#123;</span><br><span class="line">                switch (parts[0])</span><br><span class="line">                &#123;</span><br><span class="line">                    case &quot;REG&quot;: goto ZCZH; ; ;</span><br><span class="line">                    case &quot;COMM&quot;: goto ZHTX; ; ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        ZCZH:</span><br><span class="line">           </span><br><span class="line">            if (parts[1].Length == 4) </span><br><span class="line">            &#123;</span><br><span class="line">                //SENDMAIL  = parts[3];</span><br><span class="line">                USRRETURN = parts[1];</span><br><span class="line">                captchaSTR = null;////????????????????????????????</span><br><span class="line">                goto PT;</span><br><span class="line">            &#125;</span><br><span class="line">            else </span><br><span class="line">            &#123;</span><br><span class="line">                //USRRETURN = null;</span><br><span class="line">                USRID = parts[1];</span><br><span class="line">                USRKEYWORD = parts[2];</span><br><span class="line">                SENDMAIL = parts[3]; </span><br><span class="line">                Random random = new Random();</span><br><span class="line">                int[] num = new int[4];</span><br><span class="line">                string[] captcha = new string[4];</span><br><span class="line">            </span><br><span class="line">                for (int i = 0; i&lt;4;i++) </span><br><span class="line">                &#123;</span><br><span class="line">                    num[i] = random.Next(0,10); //随机生成数字</span><br><span class="line">                    captcha[i] = num[i].ToString();</span><br><span class="line">                &#125;</span><br><span class="line">                captchaSTR = captcha[0]+captcha[1]+captcha[2]+captcha[3];//这是验证码</span><br><span class="line">            goto PT;</span><br><span class="line">                ; </span><br><span class="line">            &#125;</span><br><span class="line">         </span><br><span class="line">        ZHTX:</span><br><span class="line"></span><br><span class="line">            goto PT;</span><br><span class="line">            ;</span><br><span class="line">        PT:// ZCZH 或者 ZHTX 执行完成 后统一 跳转 到 &quot;PT标签&quot;</span><br><span class="line"></span><br><span class="line">          return  ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤二：创建一个“控制台应用（-net-framework）”的新项目CHDAx02"><a href="#步骤二：创建一个“控制台应用（-net-framework）”的新项目CHDAx02" class="headerlink" title="步骤二：创建一个“控制台应用（.net framework）”的新项目CHDAx02"></a>步骤二：创建一个“控制台应用（.net framework）”的新项目CHDAx02</h2><pre><code>项目命名为CHDAx02。该项目只有一个Program.cs文件，唯一需要注意的是socket的使用，它的Beginsend方法及其回调SendCallback与发送方法send。</code></pre><p>由于这个代码是以前写的，不是用来做这个的，只是稍稍改了一下，所以有多余部分没有修改删除，不过重点注意上一句话的内容就行了。</p><h3 id="Program-cs代码如下：-1"><a href="#Program-cs代码如下：-1" class="headerlink" title="Program.cs代码如下："></a>Program.cs代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Net;</span><br><span class="line"></span><br><span class="line">namespace CHDAx02</span><br><span class="line">&#123;          </span><br><span class="line">    internal class Program //客户端</span><br><span class="line">    &#123;</span><br><span class="line">        //REGISTRATION:REG(注册请求)</span><br><span class="line">        //COMMUNICATION:COMM(通信请求)</span><br><span class="line">      </span><br><span class="line">        public enum Protocol </span><br><span class="line">        &#123;</span><br><span class="line">          REG = 1110,</span><br><span class="line">          COMM = 1111,</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        static IPAddress iPAddress;</span><br><span class="line">        public static int portINT ;</span><br><span class="line">        static IPEndPoint iPEndPoint ;</span><br><span class="line">        </span><br><span class="line">        public static string receiveSTR;</span><br><span class="line">        public static byte[] sendBuffer;</span><br><span class="line">        public static byte[] receiveBuffer;</span><br><span class="line">        static Socket socket ;</span><br><span class="line">      </span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;这里是客户端&quot;);</span><br><span class="line">              try </span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;注意输入用户信息时，格式为 用户id/用户密码/用户邮箱 然后回车，只回车一下，然后等待邮箱接受验证码&quot;);</span><br><span class="line">                Console.WriteLine(&quot;当邮箱接收到验证码后，就可以直接在客户端输入验证码然后回车，若验证码正确，注册完成&quot;);</span><br><span class="line">                Console.WriteLine(&quot;输入服务端IP地址：&quot;);</span><br><span class="line">                iPAddress = IPAddress.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(&quot;输入服务端端口：&quot;);</span><br><span class="line">                portINT = int.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(&quot;输入用户信息：&quot;);</span><br><span class="line">                iPEndPoint = new IPEndPoint(iPAddress, portINT);</span><br><span class="line">                socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">                socket.BeginConnect(iPEndPoint, ConnectCallback, socket);</span><br><span class="line">                while (true)</span><br><span class="line">                &#123;</span><br><span class="line">                    string asd = Console.ReadLine();</span><br><span class="line">                    Send(Protocol.REG, asd);</span><br><span class="line">                &#125;</span><br><span class="line">                //*发送信息方法</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SocketException se) &#123; Console.WriteLine(&quot;MainSE:&quot;+se.Message); &#125;</span><br><span class="line">            catch (Exception ex) &#123; Console.WriteLine(&quot;MainEX:&quot;+ex.Message); &#125;</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(&quot;按任意键关闭&quot;);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        private static void ConnectCallback(IAsyncResult ar)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Socket clientSocket = (Socket)ar.AsyncState;</span><br><span class="line">                clientSocket.EndConnect(ar);</span><br><span class="line">                //注释接收</span><br><span class="line">             //clientSocket.BeginReceive(receiveBuffer,0,receiveBuffer.Length,0,ReceiveCallback,clientSocket);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            catch (SocketException se) &#123; Console.WriteLine(&quot;CCBse:&quot;+se.Message); &#125;</span><br><span class="line">            catch (Exception ex) &#123; Console.WriteLine(&quot;CCBex:&quot;+ex.Message); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static void ReceiveCallback(IAsyncResult ar)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Socket clientSocket = (Socket)ar.AsyncState;</span><br><span class="line">                int cont = clientSocket.EndReceive(ar);</span><br><span class="line">                receiveSTR = System.Text.Encoding.UTF8.GetString(receiveBuffer, 0, cont);</span><br><span class="line">                Console.WriteLine(receiveSTR);//*</span><br><span class="line">                clientSocket.BeginReceive(receiveBuffer, 0, receiveBuffer.Length, 0, ReceiveCallback, clientSocket);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SocketException se) &#123; Console.WriteLine(&quot;RCBse:&quot; + se.Message); &#125;</span><br><span class="line">            catch (Exception ex) &#123; Console.WriteLine(&quot;RCBex:&quot;+ex.Message); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Send(Protocol protocol,string UserSendSTR) //手动调用//约定协议，协议全部大写</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                string sendData = protocol + &quot;/&quot; + UserSendSTR;</span><br><span class="line">                sendBuffer = System.Text.Encoding.UTF8.GetBytes(sendData);</span><br><span class="line">                socket.BeginSend(sendBuffer, 0, sendBuffer.Length, 0, SendCallback, socket);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            catch (SocketException se) &#123; Console.WriteLine(&quot;SendSE:&quot; + se.Message); &#125;</span><br><span class="line">            catch (Exception ex) &#123; Console.WriteLine(&quot;SendSE:&quot;+ex.Message); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static void SendCallback(IAsyncResult ar)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Socket socket = (Socket)ar.AsyncState;</span><br><span class="line">                int cont = socket.EndSend(ar);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SocketException se) &#123; Console.WriteLine(&quot;SCBse:&quot; + se.Message); &#125;</span><br><span class="line">            catch (Exception ex) &#123; Console.WriteLine(&quot;SCBex:&quot;+ex.Message); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤三：如果就只是在本机的端口上使用，那么已经完成。如果想两台电脑远程访问，需要结合路由器的端口映射和cpolar创建隧道，进行进行内网穿透。"><a href="#步骤三：如果就只是在本机的端口上使用，那么已经完成。如果想两台电脑远程访问，需要结合路由器的端口映射和cpolar创建隧道，进行进行内网穿透。" class="headerlink" title="步骤三：如果就只是在本机的端口上使用，那么已经完成。如果想两台电脑远程访问，需要结合路由器的端口映射和cpolar创建隧道，进行进行内网穿透。"></a>步骤三：如果就只是在本机的端口上使用，那么已经完成。如果想两台电脑远程访问，需要结合路由器的端口映射和cpolar创建隧道，进行进行内网穿透。</h2><h3 id="当你完成端口映射和隧道创建后："><a href="#当你完成端口映射和隧道创建后：" class="headerlink" title="当你完成端口映射和隧道创建后："></a>当你完成端口映射和隧道创建后：</h3><pre><code>拥有FWDBx02 项目的作服务端，在输入ip是，应该是你的内网ip，即在cmd中ipconfig看到的ip地址。而CHDAx02项目则是需要发送给客户端，这里输入的ip应该是路由器的公网ip，需要注意端口要统一。原理：当客户端访问 路由器公网ip:端口 时，因为有端口映射，所以路由器会把该端口的访问转发到映射的内网ip上的端口上，就完成了通信。</code></pre><h2 id="代码很粗糙，我知道，这只是我的一个学习记录而已。"><a href="#代码很粗糙，我知道，这只是我的一个学习记录而已。" class="headerlink" title="代码很粗糙，我知道，这只是我的一个学习记录而已。"></a>代码很粗糙，我知道，这只是我的一个学习记录而已。</h2>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器端口映射与cpolar内网穿透</title>
      <link href="/2024/11/03/%E6%96%B0%E6%96%87%E7%AB%A0/"/>
      <url>/2024/11/03/%E6%96%B0%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h1 id="通过端口映射和隧道技术实现内网穿透"><a href="#通过端口映射和隧道技术实现内网穿透" class="headerlink" title="通过端口映射和隧道技术实现内网穿透"></a>通过端口映射和隧道技术实现内网穿透</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在现代网络环境中，我们经常需要从外部网络访问内网资源。本文将介绍如何通过在路由器中设置端口映射，并使用cpolar创建隧道，来实现从外网访问内网中的私人电脑网站文件。</p><h2 id="步骤一：设置端口映射和创建隧道"><a href="#步骤一：设置端口映射和创建隧道" class="headerlink" title="步骤一：设置端口映射和创建隧道"></a>步骤一：设置端口映射和创建隧道</h2><p>首先，我们需要在路由器中添加一个端口映射。这一步骤将外网的端口映射到内网特定设备的特定端口上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 登录到你的路由器管理界面。</span><br><span class="line">2. 找到“端口映射”或“端口转发”的设置选项。</span><br><span class="line">3. 添加一个新的端口映射规则，指定：</span><br><span class="line">   - 外部端口（你希望从外网访问的端口）</span><br><span class="line">   - 内部IP地址（你的私人电脑的内网IP）</span><br><span class="line">   - 内部端口（你的私人电脑监听的端口，一般情况下与外部端口相同）</span><br></pre></td></tr></table></figure><h2 id="步骤二：使用cpolar创建隧道"><a href="#步骤二：使用cpolar创建隧道" class="headerlink" title="步骤二：使用cpolar创建隧道"></a>步骤二：使用cpolar创建隧道</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 在你的私人电脑上安装并运行cpolar。</span><br><span class="line">2. 按照cpolar的指引，设置隧道，使用以下参数：</span><br><span class="line">   - 公网IP：你的路由器的公网IP地址</span><br><span class="line">   - 公网端口：你之前在路由器中设置的外部端口</span><br><span class="line">3. 启动隧道，cpolar将生成一个网址，用于外网访问。</span><br></pre></td></tr></table></figure><h2 id="步骤三：访问你的私人网站"><a href="#步骤三：访问你的私人网站" class="headerlink" title="步骤三：访问你的私人网站"></a>步骤三：访问你的私人网站</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 在浏览器中输入cpolar提供的网址，你将能够看到你的私人网站上的内容。</span><br><span class="line">- 这里需要注意的问题主要是 你自己的网站是否有SSL/TLS证书；如果没有，就使用http 开头的网址访问（cpolar提供网址）。</span><br></pre></td></tr></table></figure><h2 id="可能出现的问题：Cpolar-Web-UI可能无法登录。"><a href="#可能出现的问题：Cpolar-Web-UI可能无法登录。" class="headerlink" title="可能出现的问题：Cpolar Web UI可能无法登录。"></a>可能出现的问题：Cpolar Web UI可能无法登录。</h2><p> 直接在计算机菜单栏里搜索“服务”，找到“Cpolar Service”。然后打开就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/03/hello-world/"/>
      <url>/2024/11/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
